// Generated by ts-to-zod
import { z } from "zod";

export const baseRecordSchema = z.object({
  id: z.string(),
  createdTime: z.string(),
});

export const fullSchema = z.object({
  url: z.string(),
  width: z.number(),
  height: z.number(),
});

export const countryEmojiSchema = z.object({
  code: z.string(),
  unicode: z.string(),
  name: z.string(),
  emoji: z.string(),
});

export const addressSchema = z.object({
  continent: z.string().optional(),
  country: z.string().optional(),
  country_code: z.string().optional(),
  region: z.string().optional(),
  state: z.string().optional(),
  state_district: z.string().optional(),
  county: z.string().optional(),
  municipality: z.string().optional(),
  city: z.string().optional(),
  town: z.string().optional(),
  village: z.string().optional(),
  city_district: z.string().optional(),
  district: z.string().optional(),
  borough: z.string().optional(),
  suburb: z.string().optional(),
  subdivision: z.string().optional(),
  hamlet: z.string().optional(),
  croft: z.string().optional(),
  isolated_dwelling: z.string().optional(),
  neighbourhood: z.string().optional(),
  allotments: z.string().optional(),
  quarter: z.string().optional(),
  city_block: z.string().optional(),
  residental: z.string().optional(),
  farm: z.string().optional(),
  farmyard: z.string().optional(),
  industrial: z.string().optional(),
  commercial: z.string().optional(),
  retail: z.string().optional(),
  road: z.string().optional(),
  house_number: z.string().optional(),
  house_name: z.string().optional(),
  emergency: z.string().optional(),
  historic: z.string().optional(),
  military: z.string().optional(),
  natural: z.string().optional(),
  landuse: z.string().optional(),
  place: z.string().optional(),
  railway: z.string().optional(),
  man_made: z.string().optional(),
  aerialway: z.string().optional(),
  boundary: z.string().optional(),
  amenity: z.string().optional(),
  aeroway: z.string().optional(),
  club: z.string().optional(),
  craft: z.string().optional(),
  leisure: z.string().optional(),
  office: z.string().optional(),
  mountain_pass: z.string().optional(),
  shop: z.string().optional(),
  tourism: z.string().optional(),
  bridge: z.string().optional(),
  tunnel: z.string().optional(),
  waterway: z.string().optional(),
});

export const copyTypeSchema = z.object({
  html: z.string(),
  plaintext: z.string(),
});

export const blogPostSchema = baseRecordSchema.extend({
  fields: z.object({
    Slug: z.string().optional(),
    Title: z.string(),
    Summary: z.string().optional(),
    Body: z.string(),
    Date: z.string(),
    Public: z.literal(true),
  }),
  body: copyTypeSchema,
});

export const staticPageSchema = baseRecordSchema.extend({
  fields: z.object({
    Slug: z.string().optional(),
    Title: z.string(),
    Summary: z.string().optional(),
    Body: z.string(),
    Public: z.literal(true),
  }),
  body: copyTypeSchema,
});

export const menuItemSchema = baseRecordSchema.extend({
  fields: z.object({
    label: z.string(),
    url: z.string(),
    placement: z.array(z.union([z.literal("Header"), z.literal("Footer")])),
  }),
});

export const thumbnailsSchema = z.object({
  small: fullSchema,
  large: fullSchema,
  full: fullSchema.optional(),
});

export const openStreetMapReverseGeocodeResponseSchema = z.object({
  place_id: z.number(),
  licence: z.string(),
  osm_type: z.string(),
  osm_id: z.number(),
  lat: z.string(),
  lon: z.string(),
  place_rank: z.number(),
  category: z.string(),
  type: z.string(),
  importance: z.number(),
  addresstype: z.string().optional(),
  name: z.string().optional(),
  display_name: z.string(),
  address: addressSchema.optional(),
  boundingbox: z.array(z.string()),
});

export const geographySchema = z.object({
  country: z.array(
    z.object({
      name: z.string(),
      emoji: countryEmojiSchema,
      iso3166: z.string(),
      latitude: z.number(),
      longitude: z.number(),
    })
  ),
  location: openStreetMapReverseGeocodeResponseSchema.optional(),
});

export const documentSchema = z.object({
  id: z.string(),
  url: z.string(),
  filename: z.string(),
  size: z.number(),
  type: z.string(),
  thumbnails: thumbnailsSchema,
});

export const solidarityActionSchema = baseRecordSchema.extend({
  geography: geographySchema,
  fields: z.object({
    Name: z.string(),
    Location: z.string().optional(),
    Summary: z.string().optional(),
    Date: z.string(),
    LastModified: z.string(),
    Link: z.string().optional(),
    LocationData: z.string().optional(),
    Country: z.array(z.string()).optional(),
    countryName: z.array(z.string()),
    companyName: z.array(z.string()).optional(),
    organisingGroupName: z.array(z.string()).optional(),
    countryCode: z.array(z.string()),
    countrySlug: z.array(z.string()),
    Company: z.array(z.string()).optional(),
    "Organising Groups": z.array(z.string()).optional(),
    Category: z.array(z.string()).optional(),
    CategoryName: z.array(z.string()).optional(),
    CategoryEmoji: z.array(z.string()).optional(),
    Document: z.array(documentSchema).optional(),
    DisplayStyle: z.union([z.literal("Featured"), z.null()]).optional(),
    Public: z.literal(true),
  }),
  summary: copyTypeSchema,
});

export const organisingGroupSchema = baseRecordSchema.extend({
  geography: geographySchema.pick({ country: true }),
  fields: z.object({
    Name: z.string(),
    "Full Name": z.string().optional(),
    Country: z.array(z.string()).optional(),
    countryName: z.array(z.string()).optional(),
    countryCode: z.array(z.string()).optional(),
    IsUnion: z.boolean().optional(),
    Website: z.string().optional(),
    Twitter: z.string().optional(),
    "Solidarity Actions": z.array(z.string()).optional(),
  }),
  solidarityActions: z.array(solidarityActionSchema).optional(),
});

export const companySchema = baseRecordSchema.extend({
  fields: z.object({
    Name: z.string(),
    Summary: z.string().optional(),
    "Solidarity Actions": z.array(z.string()).optional(),
  }),
  solidarityActions: z.array(solidarityActionSchema).optional(),
  summary: copyTypeSchema,
});

export const categorySchema = baseRecordSchema.extend({
  fields: z.object({
    Name: z.string(),
    Emoji: z.string(),
    Summary: z.string().optional(),
    "Solidarity Actions": z.array(z.string()).optional(),
  }),
  solidarityActions: z.array(solidarityActionSchema).optional(),
  summary: copyTypeSchema,
});

export const countrySchema = baseRecordSchema.extend({
  emoji: countryEmojiSchema,
  fields: z.object({
    Name: z.string(),
    countryCode: z.string(),
    Summary: z.string().optional(),
    Slug: z.string(),
    Unions: z.array(z.string()).optional(),
    unionNames: z.array(z.string()).optional(),
    "Solidarity Actions": z.array(z.string()).optional(),
  }),
  solidarityActions: z.array(solidarityActionSchema).optional(),
  organisingGroups: z.array(organisingGroupSchema).optional(),
  summary: copyTypeSchema,
});
