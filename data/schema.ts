// Generated by ts-to-zod
import { z } from "zod";

export const baseRecordSchema = z.object({
  id: z.string(),
  createdTime: z.string(),
});

export const fullSchema = z.object({
  url: z.string(),
  width: z.number(),
  height: z.number(),
});

export const countryEmojiSchema = z.object({
  code: z.string(),
  unicode: z.string(),
  name: z.string(),
  emoji: z.string(),
});

export const locSchema = z.object({
  type: z.string(),
  coordinates: z.array(z.number()),
});

export const blogPostSchema = baseRecordSchema.extend({
  fields: z.object({
    Slug: z.string().optional(),
    Title: z.string(),
    Summary: z.string(),
    Body: z.string(),
    Date: z.string(),
    Public: z.literal(true),
  }),
});

export const staticPageSchema = baseRecordSchema.extend({
  fields: z.object({
    Slug: z.string().optional(),
    Title: z.string(),
    Summary: z.string(),
    Body: z.string(),
    Link: z.string().optional(),
    Public: z.literal(true),
  }),
});

export const thumbnailsSchema = z.object({
  small: fullSchema,
  large: fullSchema,
  full: fullSchema.optional(),
});

export const citySchema = z.object({
  cityId: z.union([z.string(), z.number()]),
  name: z.string(),
  country: z.string(),
  altCountry: z.string(),
  muni: z.string(),
  muniSub: z.string(),
  featureClass: z.string(),
  featureCode: z.string(),
  adminCode: z.union([z.string(), z.number()]),
  population: z.number(),
  loc: locSchema,
});

export const documentSchema = z.object({
  id: z.string(),
  url: z.string(),
  filename: z.string(),
  size: z.number(),
  type: z.string(),
  thumbnails: thumbnailsSchema,
});

export const solidarityActionSchema = baseRecordSchema.extend({
  geography: z
    .object({
      country: z.object({
        emoji: countryEmojiSchema,
        iso3166: z.string(),
        latitude: z.number(),
        longitude: z.number(),
      }),
      city: z.union([citySchema.partial(), z.null()]).optional(),
    })
    .optional(),
  fields: z.object({
    Name: z.string(),
    Location: z.string().optional(),
    Summary: z.string().optional(),
    Date: z.string(),
    LastModified: z.string(),
    Link: z.string().optional(),
    Country: z.array(z.string()),
    "Country Name": z.array(z.string()),
    "Country Code": z.array(z.string()),
    "Country Slug": z.array(z.string()),
    Category: z.array(z.string()).optional(),
    Document: z.array(documentSchema).optional(),
    DisplayStyle: z.union([z.literal("Featured"), z.null()]).optional(),
    Notes: z.string().optional(),
    Public: z.literal(true),
  }),
});

export const countrySchema = baseRecordSchema.extend({
  emoji: countryEmojiSchema.optional(),
  fields: z.object({
    Name: z.string(),
    "Country Code": z.string(),
    Notes: z.string().optional(),
    Slug: z.string(),
    "Official Name": z.string(),
    "Solidarity Actions": z.array(z.any()),
    "DisplayStyle (from Solidarity Actions)": z.array(z.any()),
    "Public (from Solidarity Actions)": z.array(z.any()),
    "Category (from Solidarity Actions)": z.array(z.any()),
    "Document (from Solidarity Actions)": z.array(z.any()),
    "Link (from Solidarity Actions)": z.array(z.any()),
    "Date (from Solidarity Actions)": z.array(z.any()),
    "Summary (from Solidarity Actions)": z.array(z.any()),
    "Location (from Solidarity Actions)": z.array(z.any()),
    "Name (from Solidarity Actions)": z.array(z.any()),
  }),
  solidarityActions: z.array(solidarityActionSchema).optional(),
});
